// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
namespace Application
{
    public partial class NewsModel
    {
        /// <summary>
        /// model input class for NewsModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"id")]
            public float Id { get; set; }

            [ColumnName(@"title")]
            public string Title { get; set; }

            [ColumnName(@"author")]
            public string Author { get; set; }

            [ColumnName(@"text")]
            public string Text { get; set; }

            [ColumnName(@"label")]
            public float Label { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for NewsModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public float Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = "..\\Application\\ML_data\\NewsModel.zip";

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
